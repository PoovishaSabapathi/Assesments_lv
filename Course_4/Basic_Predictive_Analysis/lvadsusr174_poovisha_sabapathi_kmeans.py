# -*- coding: utf-8 -*-
"""lvadsusr174_poovisha_sabapathi_Kmeans.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15jG_DXW1GuGAo8swLUs2MdJwY6FXhU1c
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

import warnings
warnings.filterwarnings("ignore")

from sklearn.preprocessing import LabelEncoder,StandardScaler,PolynomialFeatures
from sklearn.model_selection import train_test_split
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score
from sklearn.metrics import accuracy_score, classification_report

data=pd.read_csv('/content/Mall_Customers.csv')
df=pd.DataFrame(data)
df.head()

df.info()

df.describe()

df.isnull().sum()

df.duplicated().sum()

np.isnan(df['Annual Income (k$)'])

for column in df.select_dtypes(include=['float64', 'int64']).columns:
    plt.figure(figsize=(10, 5))
    sns.histplot(df[column])
    plt.title(f'Histogram of {column}')
    plt.xlabel(column)
    plt.ylabel('Frequency')
    plt.show()

df=df.fillna(df['Annual Income (k$)'].mean())

df.isnull().sum()

numerical_cols=df.select_dtypes(include=['int64','float64'])
corr_mat=numerical_cols.corr()
plt.figure(figsize=(15,7))
sns.heatmap(corr_mat,annot=True)

for column in df.select_dtypes(include=['float64','int64']):
  sns.boxplot(df[[column]])

for column in df.select_dtypes(include = "number"):
  q1 = df[column].quantile(0.25)
  q3 = df[column].quantile(0.75)
  iqr = q3-q1
  lower = q1 - 1.5*iqr
  upper = q3 + 1.5* iqr
  df[column] = df[column].clip(lower = lower, upper= upper)

for column in df.select_dtypes(include=['float64','int64']):
  sns.boxplot(df[[column]])

def object_to_int(x):
  if x.dtype=='object':
    x=LabelEncoder().fit_transform(x)
  return x

df=df.apply(lambda x: object_to_int(x))
df.head(20)

km = KMeans(n_clusters=3)
y_pred = km.fit_predict(df[[column]])

df['cluster'] = y_pred

df1 = df[df.cluster == 0]
df2 = df[df.cluster == 1]
df3 = df[df.cluster == 2]

plt.scatter(df1.Age,df1['Spending Score (1-100)'],color='green')
plt.scatter(df2.Age,df2['Spending Score (1-100)'],color='blue')
plt.scatter(df3.Age,df3['Spending Score (1-100)'],color='black')

plt.scatter(km.cluster_centers_[:,0],km.cluster_centers_[:,1],color='red',marker='*',label='centroid')
plt.xlabel('Age')
plt.ylabel('Spending Score (1-100)')
plt.legend()

silhouette_score(df, y_pred)

k_range = range(1,10)
sse = []
for k in k_range:
  km = KMeans(n_clusters=k)
  km.fit(df[['Age','Spending Score (1-100)']])
  sse.append(km.inertia_)

plt.xlabel('Clusters')
plt.ylabel('SSE value')
plt.plot(k_range,sse,marker='.')

km = KMeans(n_clusters=4)
y_pred = km.fit_predict(df[[column]])

df['cluster'] = y_pred

df1 = df[df.cluster == 0]
df2 = df[df.cluster == 1]
df3 = df[df.cluster == 2]
df4 = df[df.cluster == 3]

plt.scatter(df1.Age,df1['Spending Score (1-100)'],color='green')
plt.scatter(df2.Age,df2['Spending Score (1-100)'],color='blue')
plt.scatter(df3.Age,df3['Spending Score (1-100)'],color='black')
plt.scatter(df4.Age,df4['Spending Score (1-100)'],color='pink')

plt.scatter(km.cluster_centers_[:,0],km.cluster_centers_[:,1],color='red',marker='*',label='centroid')
plt.xlabel('Age')
plt.ylabel('Spending Score (1-100)')
plt.legend()

silhouette_score(df, y_pred)