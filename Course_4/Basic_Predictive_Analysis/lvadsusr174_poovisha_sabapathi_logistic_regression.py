# -*- coding: utf-8 -*-
"""lvadsusr174_Poovisha_sabapathi_logistic_regression.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rzVLoqs5gkS2IR7fr6zi5SO2fnvl1ZSX
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import missingno as msno
from sklearn.preprocessing import LabelEncoder,MinMaxScaler,PolynomialFeatures, StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import confusion_matrix,accuracy_score,classification_report

data=pd.read_csv('/content/booking.csv')
df=pd.DataFrame(data)
df.info()

df.describe()

df.columns.values

df.info()

df.isnull().sum()

df[pd.isna(df['room type'])]
df=df.drop(df[df['car parking space']==0].index)

df.duplicated().sum()

for column in df.select_dtypes(include=['float64', 'int64']).columns:
    plt.figure(figsize=(10, 5))
    sns.histplot(df[column])
    plt.title(f'Histogram of {column}')
    plt.xlabel(column)
    plt.ylabel('Frequency')
    plt.show()

for column in df.select_dtypes(include=['object']).columns:
  plt.figure(figsize=(15,5))
  df[column].value_counts().plot(kind='bar')
  plt.xticks(rotation=45)
  plt.title(f'Bar plot of {column}')
  plt.xlabel(column)
  plt.ylabel('Frequency')
  plt.show()

def object_to_int(x):
  if x.dtype=='object':
    x=LabelEncoder().fit_transform(x)
  return x

df=df.apply(lambda x: object_to_int(x))
df.head(20)

plt.figure(figsize=(20,10))
df.corr()['booking status'].sort_values(ascending=False).plot(kind='bar')

X=df.drop(columns=['booking status'])
y=df['booking status'].values

X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.30,random_state=4)

poly = PolynomialFeatures(degree=2, include_bias=False)
X_train_poly = poly.fit_transform(X_train)
X_test_poly = poly.transform(X_test)

scaler = MinMaxScaler()
X_train_scaled = scaler.fit_transform(X_train_poly)
X_test_scaled = scaler.transform(X_test_poly)

model=LogisticRegression()
model.fit(X_train_scaled,y_train)

y_predict=model.predict(X_test_scaled)

accuracy=accuracy_score(y_test,y_predict)
conf_matrix=confusion_matrix(y_test,y_predict)
classi_rep=classification_report(y_test,y_predict)
print(f'Accuracy:{accuracy:.2f}')
print('Confusion Matrix')
print(conf_matrix)
print("Classification report")
print(classi_rep)