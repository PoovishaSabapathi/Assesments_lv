# -*- coding: utf-8 -*-
"""lvadsusr174_poovisha_sabapathi_Anamoly.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1drTHhgqN0hikSqOPno46HOehvH6i1qnG
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.impute import KNNImputer
from sklearn import preprocessing
from sklearn.ensemble import IsolationForest
from sklearn.preprocessing import LabelEncoder
import warnings
warnings.filterwarnings('ignore')

df=pd.read_csv('/content/anomaly_train.csv')
df

df.info()

df.describe()

df.isnull().sum()

df.duplicated().sum()

numerical_cols=df.select_dtypes(include=['int64','float64'])
plt.figure(figsize=(20,8))
corr_mat=numerical_cols.corr()
sns.heatmap(corr_mat,annot=True)

def object_to_int(x):
  if x.dtype=='object':
    x=LabelEncoder().fit_transform(x)
  return x

df=df.apply(lambda x: object_to_int(x))
df.head(20)

model = IsolationForest(n_estimators=100, contamination=0.1)
model.fit(df)
k=df
y_pred = model.predict(k)

df['anomaly_score']=model.decision_function(k)

df.head(10)

anomalies = df.loc[df["anomaly_score"] < 0]
anomalies

df['anomaly'] = np.where(y_pred == 1, 'no', 'yes')

df

plt.scatter(df["Amount"], df["anomaly_score"], label="Normal")
plt.scatter(anomalies["Amount"], anomalies["anomaly_score"],color="green", label="Anomaly")
plt.xlabel("")
plt.ylabel("anomaly_score")
plt.legend()
plt.show()