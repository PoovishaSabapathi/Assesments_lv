# -*- coding: utf-8 -*-
"""lvadsusr174_poovisha_sabapathi_classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nyzL3QSwZludECKpaNWfl5Rvj7KEZo0T
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

import warnings
warnings.filterwarnings("ignore")

from sklearn.preprocessing import LabelEncoder,StandardScaler,PolynomialFeatures
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score,precision_score,recall_score,f1_score

df=pd.read_csv('/content/penguins_classification.csv')
df.head()

df.info()

df.describe()

df.isnull().sum()

df.duplicated().sum()

for column in df.select_dtypes(include=['float64', 'int64']).columns:
    plt.figure(figsize=(10, 5))
    sns.histplot(df[column])
    plt.title(f'Histogram of {column}')
    plt.xlabel(column)
    plt.ylabel('Frequency')
    plt.show()

for column in df.select_dtypes(include=['object']).columns:
  plt.figure(figsize=(15,5))
  df[column].value_counts().plot(kind='bar')
  plt.xticks(rotation=45)
  plt.title(f'Bar plot of {column}')
  plt.xlabel(column)
  plt.ylabel('Frequency')
  plt.show()

null_rows = df[df.isnull().any(axis=1)]
null_rows

df=df.fillna(df['bill_depth_mm'].mean())

df.isnull().sum()

def object_to_int(x):
  if x.dtype=='object':
    x=LabelEncoder().fit_transform(x)
  return x

df=df.apply(lambda x: object_to_int(x))
df.head(20)

numerical_cols=df.select_dtypes(include=['int64','float64'])
corr_mat=numerical_cols.corr()
plt.figure(figsize=(15,7))
sns.heatmap(corr_mat,annot=True)

X=df.drop(columns=['species'])
y=df['species'].values

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=4)

poly = PolynomialFeatures(degree=2, include_bias=False)
X_train_poly = poly.fit_transform(X_train)
X_test_poly = poly.transform(X_test)

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train_poly)
X_test_scaled = scaler.transform(X_test_poly)

clf=RandomForestClassifier(n_estimators=100,random_state=42)
clf.fit(X_train_scaled,y_train)
y_pred=clf.predict(X_test_scaled)

acc=accuracy_score(y_test,y_pred)
prec=precision_score(y_test,y_pred)
rec=recall_score(y_test,y_pred)
f1_sc=f1_score(y_test,y_pred)
print('Accuracy:',acc*100,'%')
print('Precision:',prec)
print('Recall:',rec)
print('f1_score:',f1_sc)