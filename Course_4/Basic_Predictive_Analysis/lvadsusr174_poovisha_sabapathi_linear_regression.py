# -*- coding: utf-8 -*-
"""lvadsusr174_poovisha_sabapathi_linear_regression.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13QTGe8lzkkB_w6yM_o17-cum2toE1X-K
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import missingno as msno
from sklearn.preprocessing import LabelEncoder,MinMaxScaler,PolynomialFeatures, StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score,mean_squared_error,mean_absolute_error

data=pd.read_csv('/content/expenses.csv')
df=pd.DataFrame(data)
df.head(20)

df.info()

df.describe()

df.columns.values

df.duplicated().sum()

df[df.duplicated()]

df=df.drop_duplicates()

df.duplicated().sum()

df.isnull().sum()

df[pd.isna(df['BMI'])]

"""Univariate Analysis:"""

for column in df.select_dtypes(include=['float64', 'int64']).columns:
    plt.figure(figsize=(10, 5))
    sns.histplot(df[column])
    plt.title(f'Histogram of {column}')
    plt.xlabel(column)
    plt.ylabel('Frequency')
    plt.show()

for column in df.select_dtypes(include=['object']).columns:
  plt.figure(figsize=(15,5))
  df[column].value_counts().plot(kind='bar')
  plt.xticks(rotation=45)
  plt.title(f'Bar plot of {column}')
  plt.xlabel(column)
  plt.ylabel('Frequency')
  plt.show()

df=df.fillna(df["BMI"].mean())

df=pd.to_numeric(df.BMI,errors='coerce')

df["smoker"]= df["smoker"].map({0: "No", 1: "Yes"})
df.head()

"""Bivariate Analysis"""

def object_to_int(x):
  if x.dtype=='object':
    x=LabelEncoder().fit_transform(x)
  return x

df=df.apply(lambda x: object_to_int(x))
df.head(20)

plt.figure(figsize=(20,10))
df.corr()['Churn'].sort_values(ascending=False).plot(kind='bar')

numerical_columns = df.select_dtypes(include=['float64', 'int64']).columns
for i in range(len(numerical_columns)):
    for j in range(i + 1, len(numerical_columns)):
        plt.figure(figsize=(10, 6))
        sns.scatterplot(data=df, x=numerical_columns[i], y=numerical_columns[j])
        plt.title(f'Scatter Plot between {numerical_columns[i]} and {numerical_columns[j]}')
        plt.show()

X=df.drop(columns=['charges'])
y=df['charges'].values

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

poly = PolynomialFeatures(degree=2, include_bias=False)
X_train_poly = poly.fit_transform(X_train)
X_test_poly = poly.transform(X_test)

scaler = MinMaxScaler()
X_train_scaled = scaler.fit_transform(X_train_poly)
X_test_scaled = scaler.transform(X_test_poly)

model = LinearRegression()
model.fit(X_train, y_train)

predictions = model.predict(X_test)

mae = mean_absolute_error(y_test, predictions)
mse = mean_squared_error(y_test, predictions)
rmse = mean_squared_error(y_test, predictions, squared=False)  # Square root of MSE for RMSE
r2 = r2_score(y_test, predictions)

print("Coefficients:", model.coef_)
print("Intercept:", model.intercept_)

print('Mean Absolute Error (MAE):', mae)
print('Mean Squared Error (MSE):', mse)
print('Root Mean Squared Error (RMSE):', rmse)
print('R-squared (R2) Score:', r2)